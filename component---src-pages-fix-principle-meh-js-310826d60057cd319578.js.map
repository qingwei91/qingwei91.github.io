{"version":3,"sources":["webpack:///./src/pages/fix-principle-meh.js"],"names":["FixPrinciple","componentDidMount","script","document","createElement","src","async","body","appendChild","render","href","rel","id","className","data-x","data-y","alt","data-z","data-scale","React","Component"],"mappings":"+HAGMA,E,wLACJC,kBAAA,WACE,IAAMC,EAASC,SAASC,cAAc,UAEtCF,EAAOG,IAAM,kBACbH,EAAOI,OAAQ,EAEfH,SAASI,KAAKC,YAAYN,I,EAE5BO,OAAA,WACE,OACE,6BACE,0BAAMC,KAAK,wBAAwBC,IAAI,eACvC,yBAAKC,GAAG,WAEN,yBAAKC,UAAU,aAAaC,SAAO,IAAIC,SAAO,SAC5C,wBAAIH,GAAG,SAAP,mCAEF,yBAAKC,UAAU,aAAaC,SAAO,OAAOC,SAAO,SAC/C,wCACA,yBACEV,IAAI,sGACJW,IAAI,KACN,gFAEF,yBAAKH,UAAU,aAAaC,SAAO,OAAOC,SAAO,SAC/C,+CAAoB,+CACpB,yCAAc,qCAAd,sBAAmD,2CACnD,0DACA,wBAAIF,UAAU,gBAAd,YACA,sFAEF,yBAAKA,UAAU,aAAaC,SAAO,OAAOC,SAAO,SAC/C,uEACA,yBACEV,IAAI,sGACJW,IAAI,KACJ,uBAAGH,UAAU,UAAb,gCACA,uBAAGA,UAAU,UAAb,uBAEJ,yBAAKA,UAAU,aAAaC,SAAO,OAAOC,SAAO,SAC/C,mDACA,6BACA,oMAUR,2CAVQ,uDAcF,yBAAKF,UAAU,aAAaC,SAAO,OAAOC,SAAO,SAC/C,mDACA,6BACA,0BAAMF,UAAU,SAAhB,wBAIA,mGAEF,yBAAKA,UAAU,aAAaC,SAAO,OAAOC,SAAO,SAC/C,iEACA,6BACA,0BAAMF,UAAU,SAAhB,sDASF,yBAAKA,UAAU,aAAaC,SAAO,OAAOC,SAAO,SAC/C,iEACA,6BACA,0BAAMF,UAAU,SAAhB,gIASF,yBAAKA,UAAU,aAAaC,SAAO,OAAOC,SAAO,SAC/C,qDACA,6BACA,0BAAMF,UAAU,SAAhB,iJAUF,yBAAKA,UAAU,aAAaC,SAAO,OAAOC,SAAO,SAC/C,qDACA,6BACA,0BAAMF,UAAU,SAAhB,yJAYU,gDAZV,eAgBF,yBAAKA,UAAU,aAAaC,SAAO,OAAOC,SAAO,SAC/C,qDACA,6BACA,0BAAMF,UAAU,SAAhB,oLAgBF,yBAAKA,UAAU,aAAaC,SAAO,OAAOC,SAAO,SAC/C,gFACA,6BACA,0BAAMF,UAAU,SAAhB,yGAQF,yBAAKA,UAAU,aAAaC,SAAO,QAAQC,SAAO,SAChD,uDACA,6BACA,0BAAMF,UAAU,SAAhB,gSAeF,yBAAKA,UAAU,aAAaC,SAAO,QAAQC,SAAO,SAChD,gFACA,6BACA,0BAAMF,UAAU,SAAhB,+HAMR,2EAIM,yBAAKA,UAAU,aAAaC,SAAO,QAAQC,SAAO,SAChD,gFACA,6BACA,0BAAMF,UAAU,SAAhB,6JAUA,0FAA+D,2CAA/D,SAEF,yBAAKA,UAAU,aAAaC,SAAO,QAAQC,SAAO,SAChD,kFACA,6BACA,wVAiBF,yBAAKF,UAAU,aAAaC,SAAO,QAAQC,SAAO,SAChD,gDACA,6BACA,0BAAMF,UAAU,SAAhB,+KASF,yBAAKA,UAAU,aAAaC,SAAO,QAAQC,SAAO,SAChD,0CACA,yBACEV,IAAI,sGACJW,IAAI,MAER,yBAAKH,UAAU,aAAaC,SAAO,QAAQC,SAAO,SAChD,uCACA,4BACE,wFACA,gFACA,4HACA,+GAIJ,yBAAKH,GAAG,WAAWC,UAAU,OAAOC,SAAO,OAAOC,SAAO,OAAOE,SAAO,IAAIC,aAAW,QAGxF,4BAAQb,IAAI,kBACZ,qDACA,oE,GA3PmBc,IAAMC,WAiQlBpB","file":"component---src-pages-fix-principle-meh-js-310826d60057cd319578.js","sourcesContent":["import React from 'react'\n\n\nclass FixPrinciple extends React.Component {\n  componentDidMount () {\n    const script = document.createElement(\"script\");\n\n    script.src = \"/impress.min.js\";\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n  render() {\n    return (\n      <div>\n        <link href=\"/fix-presentation.css\" rel=\"stylesheet\" />\n        <div id=\"impress\">\n\n          <div className=\"step slide\" data-x=\"0\" data-y=\"-1500\">\n            <h1 id=\"title\">Fix Point from First Principle</h1>\n          </div>\n          <div className=\"step slide\" data-x=\"1200\" data-y=\"-1500\">\n            <h3>Function</h3>\n            <img\n              src=\"https://user-images.githubusercontent.com/6303687/67205886-93513800-f408-11e9-84ca-6a234f66a694.png\"\n              alt=\"\"/>\n            <p>A function maps a value from domain to codomain.</p>\n          </div>\n          <div className=\"step slide\" data-x=\"2400\" data-y=\"-1500\">\n            <p>A fix point of a <strong>function f</strong></p>\n            <p>is a value <strong>x</strong> in the function's <strong>domain</strong></p>\n            <p>where the following is true</p>\n            <h3 className=\"center large\">f(x) = x</h3>\n            <p>Insight: Fixed point is only definable with a function</p>\n          </div>\n          <div className=\"step slide\" data-x=\"3600\" data-y=\"-1500\">\n            <p>Example, the square function, f(x) = x^2</p>\n            <img\n              src=\"https://user-images.githubusercontent.com/6303687/67205936-a95ef880-f408-11e9-9c70-45623c42b9b6.png\"\n              alt=\"\"/>\n              <p className=\"center\">square(0) = 0, square(1) = 1</p>\n              <p className=\"center\">Fix point = [0, 1]</p>\n          </div>\n          <div className=\"step slide\" data-x=\"4800\" data-y=\"-1500\">\n            <h2>Define fix function</h2>\n            <pre>\n            <code>\n    fix(f) = x\n    where f(x) = x // Eg. fix(square_fn) = 0\n\n    let i = fix(f)\n    i = f(i)\n    fix(f) = f(fix(f))\n    fix(f) = f(f(fix(f)))\n    fix(f) = f(f(f(fix(f)))) // When does it ends?\n\n    <strong>Insight</strong>: fix(f) can express arbitrarily nested recursion\n            </code>\n        </pre>\n          </div>\n          <div className=\"step slide\" data-x=\"6000\" data-y=\"-1500\">\n            <h2>Type Level Function</h2>\n            <pre>\n            <code className=\"scala\">\n        type F[X] = List[X]\n            </code>\n        </pre>\n            <p>Insight: Function exists in many different form, even on type level</p>\n          </div>\n          <div className=\"step slide\" data-x=\"7200\" data-y=\"-1500\">\n            <h3>Fix point of type level function?</h3>\n            <pre>\n            <code className=\"scala\">\n    // fix(f) = f(fix(f))\n\n    type Fix[F[_]] = F[Fix[F]]\n\n\n            </code>\n        </pre>\n          </div>\n          <div className=\"step slide\" data-x=\"7200\" data-y=\"-1500\">\n            <h3>Fix point of type level function?</h3>\n            <pre>\n            <code className=\"scala\">\n    // fix(f) = f(fix(f))\n\n    type Fix[F[_]] = F[Fix[F]]  // does not compile\n\n    case class Fix[F[_]](unfix: F[Fix[F]]) // this works\n            </code>\n        </pre>\n          </div>\n          <div className=\"step slide\" data-x=\"8400\" data-y=\"-1500\">\n            <h3>Example, Peano Number</h3>\n            <pre>\n            <code className=\"scala\">\n    sealed trait Peano[A]\n    case class One[A](a: A) extends Peano[A]\n    case class Zero[A]()  extends Peano[A]\n\n    // this represents 2\n    One(One(Zero()))\n            </code>\n        </pre>\n          </div>\n          <div className=\"step slide\" data-x=\"8400\" data-y=\"-1500\">\n            <h3>Example, Peano Number</h3>\n            <pre>\n            <code className=\"scala\">\n    // this represents 2\n    One(One(Zero()))\n\n\n    case class Fix[F[_]](unfix: F[Fix[F]])\n\n    Fix(One(\n      Fix(One(\n        Fix(Zero(): Peano[Fix[Peano]])\n      ))\n    ))\n    Insight: they are <strong>semantically</strong> the same\n            </code>\n        </pre>\n          </div>\n          <div className=\"step slide\" data-x=\"8400\" data-y=\"-1500\">\n            <h3>Example, Peano Number</h3>\n            <pre>\n            <code className=\"scala\">\n    // this represents 2\n    One(One(Zero()))\n    // type == Peano[Peano[Peano[Nothing]]]\n\n    case class Fix[F[_]](unfix: F[Fix[F]])\n\n    Fix(One(\n      Fix(One(\n        Fix(Zero())\n      ))\n    ))\n    // type == Fix[Peano]\n            </code>\n        </pre>\n          </div>\n          <div className=\"step slide\" data-x=\"9600\" data-y=\"-1500\">\n            <h3>General representation allows general algorithms</h3>\n            <pre>\n            <code className=\"scala\">\n    def addAll(peano: Peano[Peano[Peano[Nothing]]]): Int = ???\n\n    def addAll(peano: Fix[Peano]): Int = ???\n\n            </code>\n        </pre>\n          </div>\n          <div className=\"step slide\" data-x=\"10800\" data-y=\"-1500\">\n            <h3>It was over-complicated</h3>\n            <pre>\n            <code className=\"scala\">\n    sealed trait Peano[A]\n    case class One[A](a: A) extends Peano[A]\n    case class Zero[A]()  extends Peano[A]\n\n    One(One(Zero())) // type = Peano[Peano[Peano[Nothing]]]\n\n    sealed trait Peano2\n    case class One(p: Peano2) extends Peano2\n    case object Zero extends Peano2\n\n    One(One(Zero)) // type = Peano2\n            </code>\n        </pre>\n          </div>\n          <div className=\"step slide\" data-x=\"12000\" data-y=\"-1500\">\n            <h3>General representation allows general algorithms</h3>\n            <pre>\n            <code className=\"scala\">\n    def addAll(peano: Peano[Peano[Peano[Nothing]]]): Int = ???\n\n    def addAll(peano: Fix[Peano]): Int = ???\n\n    // Best of both worlds?!\n    <strong>def addAll(peano: Peano2): Int = ???</strong>\n            </code>\n        </pre>\n          </div>\n          <div className=\"step slide\" data-x=\"13200\" data-y=\"-1500\">\n            <h3>General representation allows general algorithms</h3>\n            <pre>\n            <code className=\"scala\">\n    Representations, from specific to general\n\n    * Peano[Peano[Nothing]]\n    * Peano2 or Fix[Peano]\n    * Fix[F]\n\n    def collapse[F[_], A](fix: Fix[F])(fold: F[A] => A): A\n            </code>\n        </pre>\n            <p>Insight: Fix is about representing recursive structure in a <strong>general</strong> way</p>\n          </div>\n          <div className=\"step slide\" data-x=\"14400\" data-y=\"-1500\">\n            <h3>Example of really general algorithm: Cata-morphism</h3>\n            <pre>\n            <code>\n    Reminder: fix(f) = f(f(f(fix(f))))\n\n    if we have ways to\n    1. f(fix(f)) => f(a)\n    2. f(a) => a\n    3. f(fix(f)) => a // inductively from 1 and 2\n\n    We could do this\n    f(f(f(fix(f)))) // apply rule 1\n    f(f(f(a)))      // apply rule 2\n    f(f(a))         // apply rule 2\n    f(a)            // apply rule 2\n    a               // end result\n            </code>\n        </pre>\n          </div>\n          <div className=\"step slide\" data-x=\"15600\" data-y=\"-1500\">\n            <h3>Concrete example</h3>\n            <pre>\n            <code className=\"scala\">\n\n    One(One(Zero())) // Step 1: Zero[Fix[Peano]] => 0\n    One(One(0))      // Step 2: One(0) => 1 + 0\n    One(1+0)         // Step 3: One(1) => 1 + 1\n    1+1+0            // Step 4: 2!!\n            </code>\n        </pre>\n          </div>\n          <div className=\"step slide\" data-x=\"16800\" data-y=\"-1500\">\n            <h3>Comparison</h3>\n            <img\n              src=\"https://user-images.githubusercontent.com/6303687/67306018-3039d100-f4ee-11e9-8ab4-6c08bba69e00.png\"\n              alt=\"\"/>\n          </div>\n          <div className=\"step slide\" data-x=\"18000\" data-y=\"-1500\">\n            <h2>Summary</h2>\n            <ul>\n              <li>Fix point is a value of a function's domain where f(x)=x</li>\n              <li>Fix point can be defined for type level function</li>\n              <li>When used at type level, Fix Point can represent arbitrary layer of recursive data structure</li>\n              <li>The benefit of using Fix is to be able to leverage library code for recursion</li>\n            </ul>\n          </div>\n\n          <div id=\"overview\" className=\"step\" data-x=\"3000\" data-y=\"1500\" data-z=\"0\" data-scale=\"10\">\n          </div>\n        </div>\n        <script src=\"js/impress.js\"></script>\n        <script>impress().init();</script>\n        <script>hljs.initHighlightingOnLoad();</script>\n      </div>\n    )\n  }\n}\n\nexport default FixPrinciple\n"],"sourceRoot":""}