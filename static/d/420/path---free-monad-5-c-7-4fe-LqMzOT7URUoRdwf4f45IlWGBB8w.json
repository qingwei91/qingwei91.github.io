{"data":{"site":{"siteMetadata":{"title":"All models are wrong","author":"Qing Wei"}},"markdownRemark":{"id":"6cfcea10-4fed-5ca0-8661-b9ed7b3310f3","excerpt":"Understanding Free Monad I recently find out I dont quite understand Free Monad, I knew some general things about Free Monad: Free monad…","html":"<h2>Understanding Free Monad</h2>\n<p>I recently find out I dont quite understand Free Monad, I knew some general things about Free Monad:</p>\n<ol>\n<li>Free monad allow you to convert a Higher Kinded type <code class=\"language-text\">F[_]</code> to Monad for free if there exists a <code class=\"language-text\">Functor[F]</code> instance.</li>\n<li>Free monad allow us to build a program as tree-like recursive data structure, when can then be interpreted into runtime effect.</li>\n</ol>\n<p>but I never really understand why Free Monad (aka Free in the rest of this post) is the way it is, so I when on reading and this post is to write down what I’ve learned.</p>\n<h3>How to re-invent Free Monad</h3>\n<p>Our goal is to figure out a way to represent program as data structure, let’s use a simple example: <code class=\"language-text\">Making a steak</code>  </p>\n<p>To make a perfect steak you need to</p>\n<ol>\n<li>Heat the pan to piping hot</li>\n<li></li>\n</ol>","frontmatter":{"title":"Understanding Free Monad","date":"July 14, 2019"}}},"pageContext":{"slug":"/free-monad/","previous":{"fields":{"slug":"/higher-fix/"},"frontmatter":{"title":"Fix point type for GADT (Scala)"}},"next":{"fields":{"slug":"/beliefs/"},"frontmatter":{"title":"Beliefs"}}}}