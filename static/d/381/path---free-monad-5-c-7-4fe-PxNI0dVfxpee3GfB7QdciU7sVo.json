{"data":{"site":{"siteMetadata":{"title":"All models are wrong","author":"Qing Wei"}},"markdownRemark":{"id":"6cfcea10-4fed-5ca0-8661-b9ed7b3310f3","excerpt":"Understanding Free Monad I recently find out I dont quite understand Free Monad, I knew some general things about Free Monad: Free monad…","html":"<h2>Understanding Free Monad</h2>\n<p>I recently find out I dont quite understand Free Monad, I knew some general things about Free Monad:</p>\n<ol>\n<li>Free monad allow you to convert a Higher Kinded type <code class=\"language-text\">F[_]</code> to Monad for free if there exists a <code class=\"language-text\">Functor[F]</code> instance.</li>\n<li>Free monad allow us to build a program as tree-like recursive data structure, when can then be interpreted into runtime effect.</li>\n</ol>\n<p>but I never really understand why Free Monad (aka Free in the rest of this post) is the way it is, so I when on reading and this post is to write down what I’ve learned.</p>\n<h3>How to re-invent Free Monad</h3>\n<p>Our goal is to figure out a way to represent program as data structure, let’s use a ~simple~ cool example: <code class=\"language-text\">Making a half boiled egg</code>  </p>\n<p>Here’s a recipe to make 3 <a href=\"https://www.malaysianchinesekitchen.com/half-boiled-eggs/\">half boiled eggs</a></p>\n<ol>\n<li>Pour 700ml of water into a sauce pan</li>\n<li>Heat the saucepan</li>\n<li>Wait until water is boiled</li>\n<li>Turn off the stove and put 3 eggs into the saucepan </li>\n<li>Wait for 7 minutes</li>\n</ol>\n<p>Let’s try to create a type to represent this process</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> HalfBoiledEgg\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> PourWaterIntoPan <span class=\"token keyword\">extends</span> HalfBoiledEgg\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> TurnOnTheGas <span class=\"token keyword\">extends</span> HalfBoiledEgg\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> CheckIfBoiled <span class=\"token keyword\">extends</span> HalfBoiledEgg\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> TurnOffTheGas <span class=\"token keyword\">extends</span> HalfBoiledEgg\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> PlaceEggInPan<span class=\"token punctuation\">(</span>quantity<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> WaitFor<span class=\"token punctuation\">(</span>minute<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg</code></pre></div>\n<p>We converted the english instructions in recipe into an ADT in Scala, and we want to create a program using these instructions (primitive)</p>\n<p>We know that Monad is the tool for this kind of problem, as Monad allow us to describe sequential operations, so how do we form a Monad of <code class=\"language-text\">HalfBoildEgg</code>, … we cant, because it is not a higher kinded type</p>\n<p>Is using Monad the only way? what if we try to describe sequences using a List (or any Ordered collection)?</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">List<span class=\"token punctuation\">(</span>\n  PourWaterIntoPan<span class=\"token punctuation\">,</span>\n  TurnOnTheGas<span class=\"token punctuation\">,</span>\n  CheckIfBoiled<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nope, it does not work, we are stucked on step 4, because we wanted to check if the water is boiled, and react on it conditionally, meaning we need to get the result of <code class=\"language-text\">CheckIfBoiled</code> query, and </p>","frontmatter":{"title":"Understanding Free Monad","date":"July 14, 2019"}}},"pageContext":{"slug":"/free-monad/","previous":{"fields":{"slug":"/higher-fix/"},"frontmatter":{"title":"Fix point type for GADT (Scala)"}},"next":{"fields":{"slug":"/beliefs/"},"frontmatter":{"title":"Beliefs"}}}}