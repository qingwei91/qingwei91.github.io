{"componentChunkName":"component---src-templates-blog-post-js","path":"/free-monad/","result":{"data":{"site":{"siteMetadata":{"title":"All models are wrong","author":"Qing Wei"}},"markdownRemark":{"id":"6cfcea10-4fed-5ca0-8661-b9ed7b3310f3","excerpt":"Understanding Free Monad I recently find out I dont really understand Free Monad, I have some high level understanding about Free Monad…","html":"<h2>Understanding Free Monad</h2>\n<p>I recently find out I dont really understand Free Monad, I have some high level understanding about Free Monad:</p>\n<ol>\n<li>Free monad allow you to convert a Higher Kinded type <code class=\"language-text\">F[_]</code> to Monad for free if there exists a <code class=\"language-text\">Functor[F]</code> instance.</li>\n<li>Free monad allow us to build a program as tree-like recursive data structure, when can then be interpreted into runtime effect.</li>\n</ol>\n<p>but I never really understand why Free Monad (aka Free in the rest of this post) is the way it is, so I when on to read and this post is to write down what I’ve learned.</p>\n<h3>How you might have re-invent Free Monad</h3>\n<p>Our goal is to figure out a way to represent program as data structure, let’s use a ~simple~ cool example: <code class=\"language-text\">Making a half boiled egg</code>  </p>\n<p>Here’s a recipe to make 3 <a href=\"https://www.malaysianchinesekitchen.com/half-boiled-eggs/\">half boiled eggs</a></p>\n<ol>\n<li>Pour 700ml of water into a sauce pan</li>\n<li>Heat the saucepan</li>\n<li>Wait until water is boiled</li>\n<li>Turn off the stove and put 3 eggs into the saucepan </li>\n<li>Wait for 7 minutes</li>\n</ol>\n<p>Let’s try to create a type to represent this process</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// version 1</span>\n<span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> HalfBoiledEgg\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> PourWaterIntoPan <span class=\"token keyword\">extends</span> HalfBoiledEgg\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> TurnOnTheGas <span class=\"token keyword\">extends</span> HalfBoiledEgg\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> CheckIfBoiled <span class=\"token keyword\">extends</span> HalfBoiledEgg\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> TurnOffTheGas <span class=\"token keyword\">extends</span> HalfBoiledEgg\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> PlaceEggInPan<span class=\"token punctuation\">(</span>quantity<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> WaitFor<span class=\"token punctuation\">(</span>minute<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg</code></pre></div>\n<p>We converted the english instructions in recipe into an ADT in Scala, and we want to create a program by running these instructions 1 by 1.</p>\n<p>Can we put instructions into a List? then they will express the idea of one followed by another.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">List<span class=\"token punctuation\">(</span>\n  PourWaterIntoPan<span class=\"token punctuation\">,</span>\n  TurnOnTheGas<span class=\"token punctuation\">,</span>\n  CheckIfBoiled<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nope, it does not work, we are stuck on step 4, because we wanted to check if the water is boiled, and react on it conditionally, meaning we need to get the result of <code class=\"language-text\">CheckIfBoiled</code> query, and make decision accordingly.</p>\n<p>Let’s try to model the idea of query, ie. to run a command and get a result back, we can specify the return type as a type parameter, when interpreted will return a value of the type. </p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// version 2</span>\n\n<span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> PourWaterIntoPan <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> TurnOnTheGas <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> CheckIfBoiled <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">object</span> TurnOffTheGas <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> PlaceEggInPan<span class=\"token punctuation\">(</span>quantity<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> WaitFor<span class=\"token punctuation\">(</span>minute<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Hmm, this looks neat, it captures the essence of our domain, it uses the type param to communicate return type of each operation.</p>\n<p>Except that it lacks the ability to describe branching logic. We want to express something like this</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  PourWaterIntoPan then \n  TurnOnTheGas then\n  CheckIfBoiled then \n    if boiled do TurnOffTheGas\n    else WaitFor(1) then CheckIfBoiled ...</code></pre></div>\n<p>We need a way to express the idea of <code class=\"language-text\">if Boiled do X, else do Y</code>, one can think of it as some form of continuation, let’s model the idea of continuation into our tiny HalfBoiledEgg language.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> PourWaterIntoPan<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>next<span class=\"token operator\">:</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> TurnOnTheGas<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>next<span class=\"token operator\">:</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> CheckIfBoiled<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>next<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token keyword\">=></span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> TurnOffTheGas<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>next<span class=\"token operator\">:</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> PlaceEggInPan<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>quantity<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> next<span class=\"token operator\">:</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> WaitFor<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>minute<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> next<span class=\"token operator\">:</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Finished<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>endWith<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span></code></pre></div>\n<p>This time we add a <code class=\"language-text\">next: HalfBoiledEgg[A]</code> to all of our previous commands, to model the idea of continuation. We can keep continuing, since that would use up too much gas and eggs, so we introduce a <code class=\"language-text\">Finished</code> type to indicate reaching an end, and we might want to end our egg cooking process differently (maybe end it with a song?) so <code class=\"language-text\">Finished</code> takes a generic parameter.</p>\n<p>Now let’s try to write our egg boiling program to see if it works</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> checkUntilBoiled<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>next<span class=\"token operator\">:</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HalfBoiledEgg<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> CheckIfBoiled<span class=\"token punctuation\">(</span>\n  boiled <span class=\"token keyword\">=></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boiled<span class=\"token punctuation\">)</span> next <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    WaitFor<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> checkUntilBoiled<span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">)</span> \n\nPourWaterIntoPan<span class=\"token punctuation\">(</span>\n  TurnOnTheGas<span class=\"token punctuation\">(</span>\n    checkUntilBoiled<span class=\"token punctuation\">(</span>\n      TurnOffTheGas<span class=\"token punctuation\">(</span>\n        PlaceEggInPan<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n          WaitFor<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> Finished<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Voila, we are able to form a program that not just does <code class=\"language-text\">if else</code> branch, but we are also able to express loop by creating recursion data.</p>\n<p>It seems like such a structure is not unique to our problem, there should be other problem domain that can be expressed in similar structure, eg. grill a burger, make a pizza etc :D</p>\n<p>Are we able to refactor common components out into reusable pieces? </p>\n<p>Let’s revise what we have\na) A <code class=\"language-text\">Finished</code> type to indicate the end of the program and returns a value\nb) A few types that allow expressing continuation via <code class=\"language-text\">next</code>\nc) A <code class=\"language-text\">CheckIfBoiled</code> type that express branching via <code class=\"language-text\">a:A =&gt; next</code></p>\n<p>Is there a way to define a structure that provides all 3 capabilities in a generic way, so that we can apply it to a different domain?</p>\n<p>Ideally we wish to only write our domain language like how we did with <code class=\"language-text\">HalfBoiledEgg version 2</code>.</p>\n<p>So we have a <code class=\"language-text\">F[_]</code> which has the kind of <code class=\"language-text\">* =&gt; *</code>, and we wish to create a construct that can convert a <code class=\"language-text\">F[_]</code> into a domain language that support the 3 capabilities mentioned.</p>\n<p>Assuming our generic construct is called <code class=\"language-text\">Program</code>, we want a <code class=\"language-text\">F[_] =&gt; Program</code>, but we dont know what <code class=\"language-text\">Program</code> should looks like yet, let’s get started</p>\n<p>Describing the end of a program is straightforward</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> Program\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> TheEnd<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Program \n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Continue<span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> A<span class=\"token punctuation\">,</span> cont<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> F<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Program\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Start<span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>fa<span class=\"token operator\">:</span> F<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Program</code></pre></div>\n<p>Here’s my first try</p>","frontmatter":{"title":"Understanding Free Monad","date":"July 14, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/free-monad/","previous":{"fields":{"slug":"/higher-fix/"},"frontmatter":{"title":"Fix point type for GADT (Scala)"}},"next":{"fields":{"slug":"/thoughts/"},"frontmatter":{"title":"Thoughts"}}}}}