{"componentChunkName":"component---src-templates-blog-post-js","path":"/cancel-loop/","result":{"data":{"site":{"siteMetadata":{"title":"All models are wrong","author":"Qing Wei"}},"markdownRemark":{"id":"426c22e2-a7b5-5024-ba63-50c2bd32e9e2","excerpt":"Problem: I have a long running loop that I wish to cancelled if it does not finished after X seconds. Solution 1: Bake termination condition…","html":"<h3>Problem:</h3>\n<p>I have a long running loop that I wish to cancelled if it does not finished after X seconds.</p>\n<h3>Solution 1: Bake termination condition into our loop</h3>\n<p>It turns out to be an interesting problem for me, as I never had such need until recently.</p>\n<p>The simplest solution would be to code the logic into the loop, eg.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> loop<span class=\"token punctuation\">(</span>stopsAfter<span class=\"token operator\">:</span> Duration<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> start<span class=\"token operator\">:</span> Instant <span class=\"token operator\">=</span> Instant<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">.</span>after<span class=\"token punctuation\">(</span>stopsAfter<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Instant<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> NonTerminatingError<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// do your thing</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In each loop, we can check if loop had run too long, and terminates if it had executed for too long. Below are some pros and cons of the approach</p>\n<p><strong>Pros</strong></p>\n<ul>\n<li>Flexible on termination condition, as you can do whatever you want in your loop</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>This is not a generic solution, for every loop that you want to cancel, you have to make similar ad-hoc change to you loop</li>\n<li>This is not really cancellation/interruption, as there is no way to signal the loop to stop after the loop has started</li>\n</ul>\n<p>This is not as flexible as I would like it to be, let see how we can do better.</p>\n<h3>Solution 2: Leverage IO which are cancellable</h3>\n<p>The 1st approach isn’t great, we want something more general.</p>\n<p>It turns out some Effect types in Scala support cancellation, we will leverage <a href=\"https://typelevel.org/cats-effect/datatypes/io.html\">IO from cats-effect</a> in this article. </p>\n<p>IO monad has auto-cancellable <code class=\"language-text\">flatMap</code> chain if there’s a logical fork in your IO, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> retryIfNone<span class=\"token punctuation\">(</span>innerIO<span class=\"token operator\">:</span> IO<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IO<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  innerIO<span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Some<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> \n      println<span class=\"token punctuation\">(</span><span class=\"token string\">\"something\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// used to show some output when testing </span>\n      IO<span class=\"token punctuation\">.</span>pure<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> None <span class=\"token keyword\">=></span> \n      println<span class=\"token punctuation\">(</span><span class=\"token string\">\"nothing\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// used to show some output when testing</span>\n      retryIfNone<span class=\"token punctuation\">(</span>innerIO<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The method above call itself until <code class=\"language-text\">innerIO</code> return a result, this is what I meant by <code class=\"language-text\">flatMap</code> chain, it can potentially creates an infinite loop if <code class=\"language-text\">innerIO</code> never return a result.</p>\n<p>We can then cancel an infinite loop like the following</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">cats<span class=\"token punctuation\">.</span>effect<span class=\"token punctuation\">.</span></span>_\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span>ExecutionContext<span class=\"token punctuation\">.</span>global\n\n<span class=\"token comment\">// needed to perform logical fork</span>\n<span class=\"token keyword\">implicit</span> <span class=\"token keyword\">val</span> cs <span class=\"token operator\">=</span> IO<span class=\"token punctuation\">.</span>contextShift<span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// an infinite `flatMap` chain as the innerIO always return None</span>\n<span class=\"token keyword\">val</span> myIO <span class=\"token operator\">=</span> retryIfNone<span class=\"token punctuation\">(</span>IO<span class=\"token punctuation\">(</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// perform a logical fork using `.start`, this to allow cancellation</span>\n<span class=\"token keyword\">val</span> fiber<span class=\"token operator\">:</span> Fiber<span class=\"token punctuation\">[</span>IO<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> myIO<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>unsafeRunSync\n\n<span class=\"token comment\">// cancel the forked fiber</span>\nfiber<span class=\"token punctuation\">.</span>cancel<span class=\"token punctuation\">.</span>unsafeRunSync</code></pre></div>\n<p>With this approach, to make any arbitrary loop cancellable, we need to convert the loop into a recursive loop, and wrap each step in an IO, then we are able to cancel the loop using the approach shown above. </p>\n<p><strong>Pros</strong></p>\n<ul>\n<li>Applicable to all recursion loops</li>\n<li>Does not requires cancellation specific logic in loop</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>Incurs non-trivial overheads, every <code class=\"language-text\">flatMap</code> incurs some cost</li>\n<li>It is less readable that regular loop due to the addition <code class=\"language-text\">flatMap</code> and <code class=\"language-text\">IO</code> wrapping </li>\n</ul>\n<p>This approach is suitable if you dont need great performance or if each step of your loop is already effectful to begin with, eg. a loop that repeated hit an api is a good fit </p>\n<h3>Custom cancellable loop</h3>\n<p>The loop I wish to cancel isn’t effectful and it should be fast, thus the approach above is not sufficient, but it does give me a good idea to proceed.</p>\n<p>IO is cancellable based on the idea of <code class=\"language-text\">cancellable boundary</code>, meaning during the evaluation of IO monad, there are certains places where it checks for cancellation signal. We can implement a looping construct with the same idea, but do it without excessive <code class=\"language-text\">flatMap</code> calls</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">  <span class=\"token keyword\">def</span> cancellableLoop<span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> LoopCtx<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>\n    step<span class=\"token operator\">:</span> LoopCtx <span class=\"token keyword\">=></span> Either<span class=\"token punctuation\">[</span>LoopCtx<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>init<span class=\"token operator\">:</span> LoopCtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">implicit</span> cs<span class=\"token operator\">:</span> ContextShift<span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> monad<span class=\"token operator\">:</span> Monad<span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> F<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">def</span> inner<span class=\"token punctuation\">(</span>in<span class=\"token operator\">:</span> LoopCtx<span class=\"token punctuation\">,</span> i<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> F<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cs<span class=\"token punctuation\">.</span>shift<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_ <span class=\"token keyword\">=></span> inner<span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        step<span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">case</span> Left<span class=\"token punctuation\">(</span>cont<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> inner<span class=\"token punctuation\">(</span>cont<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">case</span> Right<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> a<span class=\"token punctuation\">.</span>pure<span class=\"token punctuation\">[</span>F<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    inner<span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Above is the solution I came up with, the idea is that by limiting user to specify the semantic of their loop using a step function, we can control the actual mechanism of loop and insert cancellation boundary in a way that is transparent to user.</p>\n<p>Note: I am using <code class=\"language-text\">user</code> here as <code class=\"language-text\">api caller</code></p>\n<h4>step: <code class=\"language-text\">LoopCtx => Either[LoopCtx, A]</code></h4>\n<p>The 1st argument is a step that takes in a <code class=\"language-text\">LoopCtx</code> and either return a <code class=\"language-text\">LoopCtx</code> or a result <code class=\"language-text\">A</code>, if it returns <code class=\"language-text\">Right(a)</code>, it means we have reach the end, and <code class=\"language-text\">Left(nextCtx)</code> means we have to continue, by having <code class=\"language-text\">LoopCtx</code> as part of the result type   </p>\n<p>Note: this is similar to the <code class=\"language-text\">tailRecM</code> method on <code class=\"language-text\">Monad</code> from <code class=\"language-text\">cats</code> library.</p>\n<h4>init: <code class=\"language-text\">LoopCtx</code></h4>\n<p>The second param is <code class=\"language-text\">init</code>, this is needed as we need a starting point to be able to call our <code class=\"language-text\">step</code> param</p>\n<h4>inner loop method</h4>\n<p>This is the meat of our method, it calls the <code class=\"language-text\">step</code> function repeatedly and recursively until it finds a result, at the same time, it tracks the number of loop and injects a cancellation boundary using <code class=\"language-text\">ContextShift::shift</code> method on every 2000 loop. </p>\n<p>Note that the number of 2000 is picked randomly   </p>\n<h4>Usage</h4>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// create non-terminating loop</span>\n<span class=\"token keyword\">val</span> cancellable <span class=\"token operator\">=</span> cancellableLoop<span class=\"token punctuation\">[</span>IO<span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">=></span> <span class=\"token punctuation\">{</span>println<span class=\"token punctuation\">(</span><span class=\"token string\">\"a step\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>Left<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> fiber <span class=\"token operator\">=</span> cancellable<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>unsafeRunSync\nfiber<span class=\"token punctuation\">.</span>cancel<span class=\"token punctuation\">.</span>unsafeRunSync</code></pre></div>\n<p>Note that the <code class=\"language-text\">step</code> params map nicely to tail recursive function, so if you have a tail recursive function, it is trivial to make it cancellable using this <code class=\"language-text\">cancellableLoop</code> construct.</p>\n<p><strong>Pros</strong></p>\n<ul>\n<li>This solution applies to many different loops</li>\n<li>It is faster than our previous solution as there are less flatMap </li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>It forces user to write their algorithm in a specific form, ie. a step function</li>\n</ul>\n<h3>Conclusion</h3>\n<p>The last approach is where I ended with, I haven’t benchmark it performs against 2nd solution. Anecdotally, my algorithm now runs a lot faster. </p>\n<p>Hope you find this post useful.</p>","frontmatter":{"title":"How to make a loop cancellable? (Scala)","date":"December 08, 2019"}}},"pageContext":{"slug":"/cancel-loop/","previous":{"fields":{"slug":"/higher-fix/"},"frontmatter":{"title":"Fix point type for GADT (Scala)"}},"next":{"fields":{"slug":"/cancel-loop/backtracking/"},"frontmatter":{"title":"Make backtracking algorithm cancellable (Scala)"}}}},"staticQueryHashes":[]}